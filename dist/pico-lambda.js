 const l = Object.getOwnPropertyNames(Array.prototype).reduce((l, m) => { l[m] = (~['concat', 'every', 'filter', 'find', 'findIndex', 'includes', 'join', 'map', 'reduce', 'reduceRight', 'slice', 'some'].indexOf(m)) ? (f,...p) => (a) => a[m](f,...p) : (~['sort', 'copyWithin', 'fill'].indexOf(m)) ? (...p) => a => [...a][m](...p) : (~['toLocaleString', 'indexOf', 'lastIndexOf'].indexOf(m)) ? (...p) => a => a[m](...p) : (~['push', 'splice'].indexOf(m)) ? (...p) => a => { var t = [...a]; t[m](...p); return t; } : (~['toString', 'entries', 'keys'].indexOf(m)) ? a => a[m]() : l[m]; return l; }, { pop: a => a.slice(0, -1), shift: a => a.slice(1), unshift: p => a => [p,...a], reverse: a => [...a].reverse(), compose: (...s) => i => s.reduceRight((v, f) => f(v), i), pipe: (...s) => i => s.reduce((v, f) => f(v), i) }); if (typeof window !== 'undefined') window.PicoLambda = l; if (module) module.exports = l; 